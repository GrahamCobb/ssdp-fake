#!/usr/bin/perl
# Copyright (C) 2014-2020 Graham R. Cobb
# Released under GPL V2 -- see LICENSE
# Not sure where I got the original for this from.  If you know please tell me.
use strict;
use warnings;
use Getopt::Long 2.33 qw(:config gnu_getopt auto_help auto_version);
# Pod not used as not enough space on router
#use Pod::Usage;
use List::Util qw[max];

use constant VERSION => '0.5';

use constant SSDPADDR => '239.255.255.250';
use constant SSDPPORT => 1900;
use constant SSDPPEER => SSDPADDR . ':' . SSDPPORT;

use constant CRLF => "\015\012";

my ($uuid, $url, $server, $serverIp);
my $last_update = 0;
my $next_notification = 0;

use IO::Socket::Multicast;
use IO::Select;

#
# Logging
#
my $verbosity = 2;
sub msgError
{
    print @_,"\n";
}
sub msgInfo
{
    print @_,"\n" if $verbosity >= 1;
}
sub msgProgress
{
    print @_,"\n" if $verbosity >= 2;
}
sub msgDebug
{
    print @_,"\n" if $verbosity >= 3;
}
# Autoflush output, otherwise errors appear in wrong place relative to logging
$| = 1;

#
# Option processing
#
my $manual = 0;
my $listen = 0;
my $media_server = 0;
my $media_renderer = 0;
my $interval = 60;
my @interfaces = ();
my @ignores = ();
my @onlys = ();
my $man = 0;
#Getopt::Long::Configure ("bundling");
if (!GetOptions(
	 "listen-only|l" => \$listen,
	 "media-server|m" => \$media_server,
	 "renderer|r" => \$media_renderer,
	 "timer|t=i" => \$interval,
	 "interface|i=s" => \@interfaces,
	 "only|o=s" => \@onlys,
	 "ignore|n=s" => \@ignores,
	 "verbose|v:+" => \$verbosity,
	 "man" => \$man,
    )) {
    msgError("Usage: ssdp-fake [--listen-only] [--timer=<seconds>] [--interface=<address>]... [--verbose]... [--ignore=<address>]... [--only=<address>]... [--media-server] [--renderer] <server-host> | <url> <uuid>");
    exit;
}
msgDebug "man = $man";
#if ($man) {
#    pod2usage(-verbose => 2);
#    exit;
#}
# Default system type is media server
$media_server=1 if ! $media_renderer;
if (! $listen) {
    if (scalar(@ARGV) > 1) {
	# Information manually configured
	($url, $uuid) = @ARGV;
	$manual = 1;
    } else {
	$server = shift or die "Server name missing";
	$serverIp = inet_aton($server);
    }
}

msgDebug "verbosity = $verbosity";
msgDebug "media_server = $media_server";
msgDebug "media_renderer = $media_renderer";
msgDebug "server = ", $server ? $server : '';
msgDebug "serverIP = ", $serverIp ? inet_ntoa($serverIp) : '';
msgDebug "url = ", $url ? $url : ''; 
msgDebug "uuid = ", $uuid ? $uuid : ''; 
msgDebug "listen = $listen";
msgDebug "manual = $manual";
msgDebug "interval = $interval";
msgDebug "interaces = @interfaces";
msgDebug "ignores = @ignores";
msgDebug "onlys = @onlys";


# Multicast sending socket
my $sout = IO::Socket::Multicast->new(Proto => 'udp',
#                  PeerAddr => SSDPPEER,
                  ReuseAddr => 1)
       || die "Can't make multicast send socket: $!\n";
$sout->mcast_loopback(1)
       || die "Setting loopback on multicast send socket: $!\n";
foreach my $int (@interfaces) {
    $sout->mcast_if($int)
       || die "Setting interface on multicast send socket: $!\n";
}

# Multicast receive socket
my $sinm = IO::Socket::Multicast->new(Proto => 'udp',
		  LocalPort => SSDPPORT,
                  ReuseAddr => 1)
       || die "Can't make multicast receive socket: $!\n";
if ($#interfaces < 0) {
    $sinm->mcast_add(SSDPADDR) # No interfaces
	|| die "Setting address on multicast receive socket: $!\n";
}
foreach my $int (@interfaces) {
    $sout->mcast_add(SSDPADDR,$int)
       || die "Setting address and interface $int on multicast receive socket: $!\n";
}

# Server request socket (unicast)
my $sinsrvr = IO::Socket::INET->new(Proto => 'udp',
            ReuseAddr => 1)
       || die "Can't make server socket: $!\n";

sub build_response {
    # 'ST', uuid, url, ($interval*10), 'urn:schemas-upnp-org:device:MediaServer:1'
    my ($type, $uuid, $url, $age, $urn) = @_;
    my $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. $type .': ' . ($urn || ('uuid:'.$uuid)) . CRLF
	. 'USN: uuid:' . $uuid . ($urn ? '::' . $urn : '') . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'OPT: "http://schemas.upnp.org/upnp/1/0/"; ns=01' . CRLF
	. '01-NLS: uuid:' . $uuid . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . $age . CRLF . CRLF;
    return $msg;
}

my $myport;
sub send_response {
    # address, port, 'ST', uuid, url, ($interval*10), 'urn:schemas-upnp-org:device:MediaServer:1'
    my ($addr, $port, $type, $uuid, $url, $age, $urn) = @_;
    my $to = pack_sockaddr_in($port, $addr);
    
    my $msg = build_response($type, $uuid, $url, $age, $urn);
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    # Note: our sending port is not assigned until at least one send has happened
    if (!$myport) {
	my $mysock = $sout->sockname;
	($myport) = unpack_sockaddr_in($mysock);
	msgDebug "My port is $myport";
    }
}

sub notify {
    notify_media_server(@_) if ($media_server);
    notify_media_renderer(@_) if ($media_renderer);
}

sub notify_media_server {
    my ($type, $addr, $port) = @_;
    if ($listen) {
	msgProgress "Skipping $type notification\n";
	return;
    }
    if ((not defined $url) || (not defined $uuid)) {
	msgError "Skipping $type notification\n";
	return;
    }

    # $type is NT or ST
    # Root device 
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'upnp:rootdevice');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), '');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:device:MediaServer:1');
    # Services
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:ContentDirectory:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:ConnectionManager:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:X_MS_MediaReceiverRegistrar:1');
}

sub notify_media_renderer {
    my ($type, $addr, $port) = @_;
    if ($listen) {
	msgProgress "Skipping renderer $type notification\n";
	return;
    }
    if ((not defined $url) || (not defined $uuid)) {
	msgError "Skipping renderer $type notification\n";
	return;
    }

    # $type is NT or ST
    # Root device 
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'upnp:rootdevice');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), '');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:device:MediaRenderer:1');
    # Services
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:AVTransport:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:RenderingControl:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:schemas-upnp-org:service:ConnectionManager:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Info:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Time:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Volume:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Credentials:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Playlist:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Radio:1');
    send_response($addr, $port, $type, $uuid, $url, ($interval*10), 'urn:av-openhome-org:service:Product:2');
}

sub server {
    my ($server, $serverIp) = @_;
    my $msg = 'M-SEARCH * HTTP/1.1' . CRLF
	. 'Host: ' . $server . ':' . SSDPPORT . CRLF
	. 'Man: "ssdp:discover"' . CRLF
	. 'ST: upnp:rootdevice' . CRLF
	. 'MX: 3' . CRLF
	. 'User-Agent: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF . CRLF;
    msgInfo "Sending to server $server:\n", $msg;
    my $to = pack_sockaddr_in(SSDPPORT, $serverIp);
    $sinsrvr->send($msg, 0, $to) || die "Can't send server request: $!\n";
}

sub parse_msg {
    my ($msg) = @_;

    return if $msg !~ m!^HTTP/1.1\s*200\s*OK!i;

    # We have a response to our M-SEARCH
    ($url) = ($msg =~ /^LOCATION:\s*(.*)\r$/im);
    ($uuid) = ($msg =~ /^USN:\s*uuid:([^:]+):/im);
    msgProgress "URL=$url, UUID=$uuid";
    $last_update = time();
    # Bring notification forward
    $next_notification = time() + 1;
}

sub is_search {
    my ($msg) = @_;
    return $msg =~ /^M-SEARCH/i;
}

# Get info from server
server($server, $serverIp) if $server;

$next_notification = time() + $interval;

# Unicast receive socket
dir "sending port number not set" if !$myport;
my $sin = IO::Socket::INET->new(Proto => 'udp',
            LocalPort => $myport,
            ReuseAddr => 1)
       || die "Can't make unicast receive socket: $!\n";

my $sel = IO::Select->new;
$sel->add($sin);
$sel->add($sinm);
$sel->add($sinsrvr) if $sinsrvr;

while (1) {
    my @ready = $sel->can_read(max($next_notification - time(), 0));
    foreach my $fh (@ready) {
	if ($fh == $sin) {
	    my ($data, $from, $addr, $port);
	    $from = $sin->recv($data, 4096);
	    if (defined($from)) {
		($port, $addr) = unpack_sockaddr_in($from);
		msgInfo "Received unicast from " . inet_ntoa($addr) . ":$port: $data";
		if (is_search($data)) {
		    notify('ST', $addr, $port);
		} else {
		    parse_msg($data);
		}
	    }
	} elsif ($fh == $sinm) {
	    my ($data, $from, $addr, $port);
	    $from = $sinm->recv($data, 4096);
	    if (defined($from)) {
		($port, $addr) = unpack_sockaddr_in($from);
		if ( scalar(@onlys) && ! grep {
			my ($only_addr, $only_port);
			($only_addr, $only_port) = split ':';
			(
			 ((! $only_addr) || ($only_addr eq inet_ntoa($addr)))
			 && ((! $only_port) || ($only_port == $port))
			)
		     } @onlys
		    ) {
		    msgProgress "Ignoring multicast from ".inet_ntoa($addr).":$port";
		} elsif (
		     grep {
			my ($ignore_addr, $ignore_port);
			($ignore_addr, $ignore_port) = split ':';
			(
			 ((! $ignore_addr) || ($ignore_addr eq inet_ntoa($addr)))
			 && ((! $ignore_port) || ($ignore_port == $port))
			)
		     } @ignores
		    ) {
		    msgProgress "Ignoring multicast from ".inet_ntoa($addr).":$port";
		} elsif ($port == $myport) {
		    msgProgress "Ignored multicast from ourselves (".inet_ntoa($addr).":$port)";
		} else {
		    msgProgress "Received multicast from ".inet_ntoa($addr).":$port\n", $data;
		    notify('ST', $addr, $port) if is_search($data);
		}
	    }
	} elsif ($fh == $sinsrvr) {
	    my ($data, $from, $addr, $port);
	    $from = $sinsrvr->recv($data, 4096);
	    if (defined($from)) {
		($port, $addr) = unpack_sockaddr_in($from);
		msgInfo "Received server response from " . inet_ntoa($addr) . ":$port: $data";
		parse_msg($data);
	    }
	}
    }
    if (time() >= $next_notification) {
	$next_notification = time() + $interval;
	# Has the server info been updated recently?
	if ($manual || (time() - $last_update <= $interval)) {
	    # Yes, just do the notification
	    notify('NT', inet_aton(SSDPADDR), SSDPPORT);
	} else {
	    # Get new info from the server
	    server($server, $serverIp) if $server;
	}
    }
}
