#!/usr/bin/perl
# Copyright (C) 2014 Graham R. Cobb
# Released under GPL V2 -- see LICENSE
# Not sure where I got the original for this from.  If you know please tell me.
use strict;
use warnings;
use Getopt::Long 2.33 qw(:config gnu_getopt auto_help auto_version);
# Pod not used as not enough space on router
#use Pod::Usage;
use List::Util qw[max];

use constant VERSION => '0.4';

use constant SSDPADDR => '239.255.255.250';
use constant SSDPPORT => 1900;
use constant SSDPPEER => SSDPADDR . ':' . SSDPPORT;

use constant CRLF => "\015\012";

my ($uuid, $url, $server, $serverIp);
my $last_update = 0;
my $next_notification = 0;

use IO::Socket::Multicast;
use IO::Select;

#
# Logging
#
my $verbosity = 2;
sub msgError
{
    print @_,"\n";
}
sub msgInfo
{
    print @_,"\n" if $verbosity >= 1;
}
sub msgProgress
{
    print @_,"\n" if $verbosity >= 2;
}
sub msgDebug
{
    print @_,"\n" if $verbosity >= 3;
}
# Autoflush output, otherwise errors appear in wrong place relative to logging
$| = 1;

#
# Option processing
#
my $manual = 0;
my $listen = 0;
my $interval = 60;
my @interfaces = ();
my $dryRun = 0;
my $man = 0;
#Getopt::Long::Configure ("bundling");
if (!GetOptions(
	   "listen-only|l" => \$listen,
	   "timer|t=i" => \$interval,
	   "interface|i=s" => \@interfaces,
	   "dry-run|n" => \$dryRun,
	   "verbose|v:+" => \$verbosity,
	   "man" => \$man,
	   )) {
    msgError("Usage: ssdp-fake [--listen-only] [--timer=<seconds>] [--interface=<address>]... [--verbose]... <server-host> | <url> <uuid>");
    exit;
}
msgDebug "man = $man";
#if ($man) {
#    pod2usage(-verbose => 2);
#    exit;
#}
if (! $listen) {
    if (@ARGV > 1) {
	# Information manually configured
	($url, $uuid) = @ARGV;
	$manual = 1;
    } else {
	$server = shift or die "Server name missing";
	$serverIp = inet_aton($server);
    }
}

msgDebug "verbosity = $verbosity";
msgDebug "server = ", $server ? $server : '';
msgDebug "serverIP = ", $serverIp ? inet_ntoa($serverIp) : '';
msgDebug "url = ", $url ? $url : ''; 
msgDebug "uuid = ", $uuid ? $uuid : ''; 
msgDebug "listen = $listen";
msgDebug "manual = $manual";
msgDebug "interval = $interval";
msgDebug "interaces = @interfaces";
msgDebug "dryRun = $dryRun";


# Multicast sending socket
my $sout = IO::Socket::Multicast->new(Proto => 'udp',
#                  PeerAddr => SSDPPEER,
                  ReuseAddr => 1)
       || die "Can't make multicast send socket: $!\n";
$sout->mcast_loopback(1)
       || die "Setting loopback on multicast send socket: $!\n";
foreach my $int (@interfaces) {
    $sout->mcast_if($int)
       || die "Setting interface on multicast send socket: $!\n";
}

# Multicast receive socket
my $sinm = IO::Socket::Multicast->new(Proto => 'udp',
		  LocalPort => SSDPPORT,
                  ReuseAddr => 1)
       || die "Can't make multicast receive socket: $!\n";
if ($#interfaces < 0) {
    $sinm->mcast_add(SSDPADDR) # No interfaces
	|| die "Setting address on multicast receive socket: $!\n";
}
foreach my $int (@interfaces) {
    $sout->mcast_add(SSDPADDR,$int)
       || die "Setting address and interface $int on multicast receive socket: $!\n";
}

sub respond {
    my ($addr, $port) = @_;
    my $to = pack_sockaddr_in($port, $addr);
    if ((not defined $url) || (not defined $uuid) || $listen) {
	msgError "Skipping notification";
	return;
    }

    # Responses have ST:
    my $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: upnp:rootdevice' . CRLF
	. 'USN: uuid:' . $uuid . '::upnp:rootdevice' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: uuid:' . $uuid . CRLF
	. 'USN: uuid:' . $uuid . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: urn:schemas-upnp-org:device:MediaServer:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:device:MediaServer:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: urn:schemas-upnp-org:service:ContentDirectory:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:ContentDirectory:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    print "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: urn:schemas-upnp-org:service:ConnectionManager:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:ConnectionManager:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'ST: urn:schemas-upnp-org:service:X_MS_MediaReceiverRegistrar:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:X_MS_MediaReceiverRegistrar:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";
}

sub notify {
    my ($addr, $port) = @_;
    my $to = pack_sockaddr_in($port, $addr);
    if ((not defined $url) || (not defined $uuid) || $listen) {
	msgError "Skipping notification\n";
	return;
    }

    # Notifies have NT:
    my $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: upnp:rootdevice' . CRLF
	. 'USN: uuid:' . $uuid . '::upnp:rootdevice' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: uuid:' . $uuid . CRLF
	. 'USN: uuid:' . $uuid . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: urn:schemas-upnp-org:device:MediaServer:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:device:MediaServer:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: urn:schemas-upnp-org:service:ContentDirectory:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:ContentDirectory:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: urn:schemas-upnp-org:service:ConnectionManager:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:ConnectionManager:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";

    $msg = 'NOTIFY * HTTP/1.1' . CRLF
	. 'NT: urn:schemas-upnp-org:service:X_MS_MediaReceiverRegistrar:1' . CRLF
	. 'USN: uuid:' . $uuid . '::urn:schemas-upnp-org:service:X_MS_MediaReceiverRegistrar:1' . CRLF
	. 'NTS: ssdp:alive' . CRLF
	. 'LOCATION: ' . $url . CRLF
	. 'HOST: 239.255.255.250:1900' . CRLF
	. 'SERVER: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF
	. 'CACHE-CONTROL: max-age=' . ($interval * 10) . CRLF . CRLF;
    msgInfo "Sending (".inet_ntoa($addr).":$port):\n", $msg;
    $sout->send($msg,0,$to) || die "Can't send notify: $!\n";
}

sub server {
    my ($server, $serverIp) = @_;
    my $msg = 'M-SEARCH * HTTP/1.1' . CRLF
	. 'Host: ' . $server . ':' . SSDPPORT . CRLF
	. 'Man: "ssdp:discover"' . CRLF
	. 'ST: upnp:rootdevice' . CRLF
	. 'MX: 3' . CRLF
	. 'User-Agent: ssdp-fake/' . VERSION . ' DLNADOC/1.50 UPnP/1.0 ssdp-fake/0' . CRLF . CRLF;
    msgInfo "Sending to server $server:\n", $msg;
    my $to = pack_sockaddr_in(SSDPPORT, $serverIp);
    $sout->send($msg, 0, $to) || die "Can't send server request: $!\n";
}

sub parse_msg {
    my ($msg) = @_;

    return if $msg !~ m!^HTTP/1.1\s*200\s*OK!i;

    # We have a response to our M-SEARCH
    ($url) = ($msg =~ /^LOCATION:\s*(.*)\r$/im);
    ($uuid) = ($msg =~ /^USN:\s*uuid:([^:]+):/im);
    msgProgress "URL=$url, UUID=$uuid";
    $last_update = time();
    # Bring notification forward
    $next_notification = time() + 1;
}

sub is_search {
    my ($msg) = @_;
    return $msg =~ /^M-SEARCH/i;
}

# Get info from server
server($server, $serverIp) if $server;

$next_notification = time() + $interval;

# Note: our sending port is not assigned until at least one send has happened
my $mysock = $sout->sockname;
my ($myport) = unpack_sockaddr_in($mysock);
msgDebug "My port is $myport";

# Unicast receive socket
my $sin = IO::Socket::INET->new(Proto => 'udp',
            LocalPort => $myport,
            ReuseAddr => 1)
       || die "Can't make unicast receive socket: $!\n";

my $sel = IO::Select->new;
$sel->add($sin);
$sel->add($sinm);

while (1) {
    my @ready = $sel->can_read(max($next_notification - time(), 0));
    foreach my $fh (@ready) {
	if($fh == $sin) {
	    my ($data, $from, $addr, $port);
	    $from = $sin->recv($data, 4096);
	    if (defined($from)) {
		($port, $addr) = unpack_sockaddr_in($from);
		msgInfo "Received unicast from " . inet_ntoa($addr) . ":$port: $data";
		if (is_search($data)) {
		    respond($addr, $port);
		} else {
		    parse_msg($data);
		}
	    }
	}
	if($fh == $sinm) {
	    my ($data, $from, $addr, $port);
	    $from = $sinm->recv($data, 4096);
	    if (defined($from)) {
		($port, $addr) = unpack_sockaddr_in($from);
		if ($port == $myport) {
		    msgProgress "Ignored multicast from ourselves (".inet_ntoa($addr).":$port)";
		} else {
		    msgProgress "Received multicast from ".inet_ntoa($addr).":$port\n", $data;
		    respond($addr, $port) if is_search($data);
		}
	    }
	}
    }
    if (time() >= $next_notification) {
	$next_notification = time() + $interval;
	# Has the server info been updated recently?
	if ($manual || (time() - $last_update <= $interval)) {
	    # Yes, just do the notification
	    notify(inet_aton(SSDPADDR), SSDPPORT);
	} else {
	    # Get new info from the server
	    server($server, $serverIp) if $server;
	}
    }
}
